/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OrdresTableDialog.java
 *
 * Created on 11 d√©c. 2011, 19:36:45
 */
package com.naval.gui;

import com.naval.modele.Navire;
import com.naval.ordres.Ordre;
import java.util.List;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author christophe
 */
public class OrdresTableDialog extends javax.swing.JDialog {
    private List<Ordre> ordres;

    /** Creates new form OrdresTableDialog */
    public OrdresTableDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Saisie des ordres");

        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                OrdresTableDialog dialog = new OrdresTableDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    void setDonnees(List<Navire> navires, List<Ordre> ordres, int minute) {
        this.ordres = ordres;
        jTable1.setModel(new CustomModel(navires, ordres, minute));
    }
}

class CustomModel extends AbstractTableModel {

    List<Navire> navires;
    private String[] columnNames = {"Minute", "Nom", "Cap", "Acceleration",};
    private Object[][] data;
    private List<Ordre> ordres;

    CustomModel(List<Navire> navires, List<Ordre> ordres, int minute) {
        this.navires = navires;
        this.ordres = ordres;

        data = new Object[ordres.size()][columnNames.length];
        int id = 0 ;
        for (Ordre o : ordres) {            
            for (Navire n : navires) {
                if (o.idNavire == n.id) {
                    data[id][0] = o.minute;
                    data[id][1] = n.nom;
                    data[id][2] = o.modificationCap;
                    data[id][3] = o.acceleration;
                    id++;
                }
            }
        }
    }

    public int getColumnCount() {
        return columnNames.length;
    }

    public int getRowCount() {
        return data.length;
    }

    public String getColumnName(int col) {
        return columnNames[col];
    }

    public Object getValueAt(int row, int col) {
        return data[row][col];
    }

    /*
     * JTable uses this method to determine the default renderer/
     * editor for each cell.  If we didn't implement this method,
     * then the last column would contain text ("true"/"false"),
     * rather than a check box.
     */
    public Class getColumnClass(int c) {
        return String.class;
    }

    /*
     * Don't need to implement this method unless your table's
     * editable.
     */
    public boolean isCellEditable(int row, int col) {
        //Note that the data/cell address is constant,
        //no matter where the cell appears onscreen.
        if (col < 2) {
            return false;
        } else {
            return true;
        }
    }

    /*
     * Don't need to implement this method unless your table's
     * data can change.
     */
    public void setValueAt(Object value, int row, int col) {
        data[row][col] = value;
        
        Ordre o = ordres.get(row);
        int iValue = Integer.parseInt((String)value);
        
        if (col == 2) {
            o.modificationCap = iValue;
        }
        else if (col == 3) {
            o.acceleration = iValue;
        }
        fireTableCellUpdated(row, col);
    }
}